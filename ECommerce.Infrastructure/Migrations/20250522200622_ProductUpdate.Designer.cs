// <auto-generated />
using System;
using ECommerce.Infrastructure.Persistence.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ECommerce.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250522200622_ProductUpdate")]
    partial class ProductUpdate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ECommerce.Domain.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a1b2c3d4-e5f6-0001-0000-000000000001"),
                            CreatedDate = new DateTime(2023, 1, 1, 10, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Akıllı cihazlar ve bileşenler",
                            IsDeleted = false,
                            Name = "Elektronik"
                        },
                        new
                        {
                            Id = new Guid("a1b2c3d4-e5f6-0001-0000-000000000002"),
                            CreatedDate = new DateTime(2023, 1, 1, 10, 1, 0, 0, DateTimeKind.Utc),
                            Description = "Her mevsim için kıyafetler",
                            IsDeleted = false,
                            Name = "Giyim"
                        },
                        new
                        {
                            Id = new Guid("a1b2c3d4-e5f6-0001-0000-000000000003"),
                            CreatedDate = new DateTime(2023, 1, 1, 10, 2, 0, 0, DateTimeKind.Utc),
                            Description = "Mutfak ve ev için küçük ev aletleri",
                            IsDeleted = false,
                            Name = "Ev Aletleri"
                        },
                        new
                        {
                            Id = new Guid("a1b2c3d4-e5f6-0001-0000-000000000004"),
                            CreatedDate = new DateTime(2023, 1, 1, 10, 3, 0, 0, DateTimeKind.Utc),
                            Description = "Farklı türlerde kitaplar",
                            IsDeleted = false,
                            Name = "Kitaplar"
                        });
                });

            modelBuilder.Entity("ECommerce.Domain.Entities.Identity.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("ECommerce.Domain.Entities.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b1c2d3e4-f5a6-0002-0000-000000000001"),
                            CategoryId = new Guid("a1b2c3d4-e5f6-0001-0000-000000000001"),
                            CreatedDate = new DateTime(2023, 1, 15, 12, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Son model akıllı telefon",
                            IsDeleted = false,
                            Name = "Akıllı Telefon X",
                            Price = 8999.99m,
                            Stock = 120
                        },
                        new
                        {
                            Id = new Guid("b1c2d3e4-f5a6-0002-0000-000000000002"),
                            CategoryId = new Guid("a1b2c3d4-e5f6-0001-0000-000000000001"),
                            CreatedDate = new DateTime(2023, 1, 15, 12, 1, 0, 0, DateTimeKind.Utc),
                            Description = "Yüksek performanslı oyun bilgisayarı",
                            IsDeleted = false,
                            Name = "Gaming Laptop Pro",
                            Price = 18500.00m,
                            Stock = 50
                        },
                        new
                        {
                            Id = new Guid("b1c2d3e4-f5a6-0002-0000-000000000003"),
                            CategoryId = new Guid("a1b2c3d4-e5f6-0001-0000-000000000001"),
                            CreatedDate = new DateTime(2023, 1, 15, 12, 2, 0, 0, DateTimeKind.Utc),
                            Description = "Hafif ve taşınabilir tablet",
                            IsDeleted = false,
                            Name = "Tablet Go",
                            Price = 2499.99m,
                            Stock = 200
                        },
                        new
                        {
                            Id = new Guid("b1c2d3e4-f5a6-0002-0000-000000000004"),
                            CategoryId = new Guid("a1b2c3d4-e5f6-0001-0000-000000000001"),
                            CreatedDate = new DateTime(2023, 1, 15, 12, 3, 0, 0, DateTimeKind.Utc),
                            Description = "Gürültü engelleme özellikli kulaklık",
                            IsDeleted = false,
                            Name = "Kablosuz Kulaklık",
                            Price = 799.00m,
                            Stock = 300
                        },
                        new
                        {
                            Id = new Guid("b1c2d3e4-f5a6-0002-0000-000000000005"),
                            CategoryId = new Guid("a1b2c3d4-e5f6-0001-0000-000000000002"),
                            CreatedDate = new DateTime(2023, 2, 1, 9, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Rahat kesim, %100 pamuk",
                            IsDeleted = false,
                            Name = "Erkek T-Shirt Pamuklu",
                            Price = 129.90m,
                            Stock = 450
                        },
                        new
                        {
                            Id = new Guid("b1c2d3e4-f5a6-0002-0000-000000000006"),
                            CategoryId = new Guid("a1b2c3d4-e5f6-0001-0000-000000000002"),
                            CreatedDate = new DateTime(2023, 2, 1, 9, 1, 0, 0, DateTimeKind.Utc),
                            Description = "Yüksek bel, dar paça jean",
                            IsDeleted = false,
                            Name = "Kadın Jean Pantolon",
                            Price = 349.50m,
                            Stock = 280
                        },
                        new
                        {
                            Id = new Guid("b1c2d3e4-f5a6-0002-0000-000000000007"),
                            CategoryId = new Guid("a1b2c3d4-e5f6-0001-0000-000000000002"),
                            CreatedDate = new DateTime(2023, 2, 1, 9, 2, 0, 0, DateTimeKind.Utc),
                            Description = "Su geçirmez hafif yağmurluk",
                            IsDeleted = false,
                            Name = "Unisex Yağmurluk",
                            Price = 599.00m,
                            Stock = 100
                        },
                        new
                        {
                            Id = new Guid("b1c2d3e4-f5a6-0002-0000-000000000008"),
                            CategoryId = new Guid("a1b2c3d4-e5f6-0001-0000-000000000003"),
                            CreatedDate = new DateTime(2023, 3, 5, 14, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Çok fonksiyonlu mutfak blenderı",
                            IsDeleted = false,
                            Name = "Akıllı Blender",
                            Price = 1200.00m,
                            Stock = 70
                        },
                        new
                        {
                            Id = new Guid("b1c2d3e4-f5a6-0002-0000-000000000009"),
                            CategoryId = new Guid("a1b2c3d4-e5f6-0001-0000-000000000003"),
                            CreatedDate = new DateTime(2023, 3, 5, 14, 1, 0, 0, DateTimeKind.Utc),
                            Description = "Çekirdekten öğütme özellikli",
                            IsDeleted = false,
                            Name = "Otomatik Kahve Makinesi",
                            Price = 2800.00m,
                            Stock = 40
                        },
                        new
                        {
                            Id = new Guid("b1c2d3e4-f5a6-0002-0000-000000000010"),
                            CategoryId = new Guid("a1b2c3d4-e5f6-0001-0000-000000000004"),
                            CreatedDate = new DateTime(2023, 4, 10, 16, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Yılın en çok okunan bilim kurgu romanı",
                            IsDeleted = false,
                            Name = "Bilim Kurgu Destanı",
                            Price = 85.00m,
                            Stock = 600
                        },
                        new
                        {
                            Id = new Guid("b1c2d3e4-f5a6-0002-0000-000000000011"),
                            CategoryId = new Guid("a1b2c3d4-e5f6-0001-0000-000000000004"),
                            CreatedDate = new DateTime(2023, 4, 10, 16, 1, 0, 0, DateTimeKind.Utc),
                            Description = "Detaylı ve resimli tarih kitabı",
                            IsDeleted = false,
                            Name = "Antik Uygarlıklar Tarihi",
                            Price = 150.00m,
                            Stock = 250
                        });
                });

            modelBuilder.Entity("ECommerce.Domain.Entities.ProductImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductImages");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c1d2e3f4-a5b6-0003-0000-000000000001"),
                            CreatedDate = new DateTime(2023, 1, 15, 12, 0, 5, 0, DateTimeKind.Utc),
                            DisplayOrder = 1,
                            ImagePath = "/uploads/products/telefon.jpg",
                            IsDeleted = false,
                            ProductId = new Guid("b1c2d3e4-f5a6-0002-0000-000000000001")
                        },
                        new
                        {
                            Id = new Guid("c1d2e3f4-a5b6-0003-0000-000000000002"),
                            CreatedDate = new DateTime(2023, 1, 15, 12, 0, 10, 0, DateTimeKind.Utc),
                            DisplayOrder = 2,
                            ImagePath = "/uploads/products/telefon_detay.jpg",
                            IsDeleted = false,
                            ProductId = new Guid("b1c2d3e4-f5a6-0002-0000-000000000001")
                        },
                        new
                        {
                            Id = new Guid("c1d2e3f4-a5b6-0003-0000-000000000003"),
                            CreatedDate = new DateTime(2023, 1, 15, 12, 1, 5, 0, DateTimeKind.Utc),
                            DisplayOrder = 1,
                            ImagePath = "/uploads/products/laptop.jpg",
                            IsDeleted = false,
                            ProductId = new Guid("b1c2d3e4-f5a6-0002-0000-000000000002")
                        },
                        new
                        {
                            Id = new Guid("c1d2e3f4-a5b6-0003-0000-000000000004"),
                            CreatedDate = new DateTime(2023, 1, 15, 12, 1, 10, 0, DateTimeKind.Utc),
                            DisplayOrder = 2,
                            ImagePath = "/uploads/products/laptop_klavye.jpg",
                            IsDeleted = false,
                            ProductId = new Guid("b1c2d3e4-f5a6-0002-0000-000000000002")
                        },
                        new
                        {
                            Id = new Guid("c1d2e3f4-a5b6-0003-0000-000000000005"),
                            CreatedDate = new DateTime(2023, 1, 15, 12, 2, 5, 0, DateTimeKind.Utc),
                            DisplayOrder = 1,
                            ImagePath = "/uploads/products/tablet.jpg",
                            IsDeleted = false,
                            ProductId = new Guid("b1c2d3e4-f5a6-0002-0000-000000000003")
                        },
                        new
                        {
                            Id = new Guid("c1d2e3f4-a5b6-0003-0000-000000000006"),
                            CreatedDate = new DateTime(2023, 1, 15, 12, 3, 5, 0, DateTimeKind.Utc),
                            DisplayOrder = 1,
                            ImagePath = "/uploads/products/kulaklik.jpg",
                            IsDeleted = false,
                            ProductId = new Guid("b1c2d3e4-f5a6-0002-0000-000000000004")
                        },
                        new
                        {
                            Id = new Guid("c1d2e3f4-a5b6-0003-0000-000000000007"),
                            CreatedDate = new DateTime(2023, 2, 1, 9, 0, 5, 0, DateTimeKind.Utc),
                            DisplayOrder = 1,
                            ImagePath = "/uploads/products/tshirt.jpg",
                            IsDeleted = false,
                            ProductId = new Guid("b1c2d3e4-f5a6-0002-0000-000000000005")
                        },
                        new
                        {
                            Id = new Guid("c1d2e3f4-a5b6-0003-0000-000000000008"),
                            CreatedDate = new DateTime(2023, 2, 1, 9, 0, 10, 0, DateTimeKind.Utc),
                            DisplayOrder = 2,
                            ImagePath = "/uploads/products/tshirt_model.jpg",
                            IsDeleted = false,
                            ProductId = new Guid("b1c2d3e4-f5a6-0002-0000-000000000005")
                        },
                        new
                        {
                            Id = new Guid("c1d2e3f4-a5b6-0003-0000-000000000009"),
                            CreatedDate = new DateTime(2023, 2, 1, 9, 1, 5, 0, DateTimeKind.Utc),
                            DisplayOrder = 1,
                            ImagePath = "/uploads/products/jean.jpg",
                            IsDeleted = false,
                            ProductId = new Guid("b1c2d3e4-f5a6-0002-0000-000000000006")
                        },
                        new
                        {
                            Id = new Guid("c1d2e3f4-a5b6-0003-0000-000000000010"),
                            CreatedDate = new DateTime(2023, 2, 1, 9, 2, 5, 0, DateTimeKind.Utc),
                            DisplayOrder = 1,
                            ImagePath = "/uploads/products/yagmurluk.jpg",
                            IsDeleted = false,
                            ProductId = new Guid("b1c2d3e4-f5a6-0002-0000-000000000007")
                        },
                        new
                        {
                            Id = new Guid("c1d2e3f4-a5b6-0003-0000-000000000011"),
                            CreatedDate = new DateTime(2023, 3, 5, 14, 0, 5, 0, DateTimeKind.Utc),
                            DisplayOrder = 1,
                            ImagePath = "/uploads/products/blender.jpg",
                            IsDeleted = false,
                            ProductId = new Guid("b1c2d3e4-f5a6-0002-0000-000000000008")
                        },
                        new
                        {
                            Id = new Guid("c1d2e3f4-a5b6-0003-0000-000000000012"),
                            CreatedDate = new DateTime(2023, 3, 5, 14, 1, 5, 0, DateTimeKind.Utc),
                            DisplayOrder = 1,
                            ImagePath = "/uploads/products/kahve_makinesi.jpg",
                            IsDeleted = false,
                            ProductId = new Guid("b1c2d3e4-f5a6-0002-0000-000000000009")
                        },
                        new
                        {
                            Id = new Guid("c1d2e3f4-a5b6-0003-0000-000000000013"),
                            CreatedDate = new DateTime(2023, 4, 10, 16, 0, 5, 0, DateTimeKind.Utc),
                            DisplayOrder = 1,
                            ImagePath = "/uploads/products/bilim_kurgu_kitap.jpg",
                            IsDeleted = false,
                            ProductId = new Guid("b1c2d3e4-f5a6-0002-0000-000000000010")
                        },
                        new
                        {
                            Id = new Guid("c1d2e3f4-a5b6-0003-0000-000000000014"),
                            CreatedDate = new DateTime(2023, 4, 10, 16, 1, 5, 0, DateTimeKind.Utc),
                            DisplayOrder = 1,
                            ImagePath = "/uploads/products/tarih_kitap.jpg",
                            IsDeleted = false,
                            ProductId = new Guid("b1c2d3e4-f5a6-0002-0000-000000000011")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ECommerce.Domain.Entities.Product", b =>
                {
                    b.HasOne("ECommerce.Domain.Entities.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("ECommerce.Domain.Entities.ProductImage", b =>
                {
                    b.HasOne("ECommerce.Domain.Entities.Product", "Product")
                        .WithMany("ProductImages")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ECommerce.Domain.Entities.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ECommerce.Domain.Entities.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECommerce.Domain.Entities.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ECommerce.Domain.Entities.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ECommerce.Domain.Entities.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("ECommerce.Domain.Entities.Product", b =>
                {
                    b.Navigation("ProductImages");
                });
#pragma warning restore 612, 618
        }
    }
}
